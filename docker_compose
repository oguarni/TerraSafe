# docker-compose.yml - Multi-stage setup for TerraSafe
version: '3.8'

services:
  terrasafe:
    build:
      context: .
      dockerfile: Dockerfile.prod
    image: terrasafe:latest
    container_name: terrasafe-scanner
    volumes:
      - ./test_files:/app/test_files:ro
      - ./scan_results:/app/results
    environment:
      - LOG_LEVEL=INFO
      - ML_CONFIDENCE_THRESHOLD=0.7
    command: ["test_files/vulnerable.tf"]
    networks:
      - terrasafe-network

  terrasafe-api:
    build:
      context: .
      dockerfile: Dockerfile.api
    image: terrasafe-api:latest
    container_name: terrasafe-api
    ports:
      - "8080:8080"
    volumes:
      - ./models:/app/models:ro
    environment:
      - API_PORT=8080
      - WORKERS=4
    networks:
      - terrasafe-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  terrasafe-network:
    driver: bridge

---
# Dockerfile.prod - Production optimized image
FROM python:3.9-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Production stage
FROM python:3.9-slim

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set working directory
WORKDIR /app

# Copy application files
COPY security_scanner.py .
COPY models/ ./models/

# Create non-root user
RUN useradd -m -u 1000 scanner && \
    chown -R scanner:scanner /app

USER scanner

# Set entrypoint
ENTRYPOINT ["python", "security_scanner.py"]

---
# .gitlab-ci.yml - GitLab CI/CD Pipeline
stages:
  - test
  - build
  - security
  - deploy

variables:
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  
before_script:
  - python -V
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate

unit-tests:
  stage: test
  script:
    - pip install -r requirements.txt
    - pip install pytest coverage
    - coverage run -m pytest test_security_scanner.py
    - coverage report
    - coverage xml
  coverage: '/TOTAL.+?(\d+\%)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

integration-tests:
  stage: test
  script:
    - pip install -r requirements.txt
    - python test_runner.py --integration
  artifacts:
    paths:
      - scan_results.json
    expire_in: 1 week

security-scan:
  stage: security
  script:
    - pip install -r requirements.txt
    - python security_scanner.py test_files/vulnerable.tf
    - python security_scanner.py test_files/secure.tf
    - python security_scanner.py test_files/mixed.tf
  allow_failure: true
  artifacts:
    paths:
      - scan_results.json
    when: always

docker-build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t $DOCKER_IMAGE -f Dockerfile.prod .
    - docker push $DOCKER_IMAGE
  only:
    - main
    - tags

deploy-staging:
  stage: deploy
  environment:
    name: staging
    url: https://terrasafe-staging.example.com
  script:
    - echo "Deploying to staging..."
    # Add your deployment commands here
  only:
    - main

deploy-production:
  stage: deploy
  environment:
    name: production
    url: https://terrasafe.example.com
  script:
    - echo "Deploying to production..."
    # Add your deployment commands here
  only:
    - tags
  when: manual